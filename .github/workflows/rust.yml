name: Rust CI

on:
  push:
    branches: ["master"]
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "Makefile"
      - ".travis.yml"
      - "Dockerfile"
  pull_request:
    branches: ["master"]
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "Makefile"
      - ".travis.yml"
      - "Dockerfile"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [1.80.0, stable]
    # services:
    # postgres:
    #   image: postgres:16.3
    #   env:
    #     POSTGRES_USER: dev
    #     POSTGRES_PASSWORD: dev
    #     POSTGRES_DB: dev
    #   ports:
    #     - 5432:5432
    #   options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    # kafka:
    #   image: confluentinc/cp-kafka:7.5.1
    #   env:
    #     KAFKA_BROKER_ID: 1
    #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #   ports:
    #     - 9092:9092
    # zookeeper:
    #   image: zookeeper:3.9.1
    #   ports:
    #     - 2181:2181
    # scylla:
    #   image: scylladb/scylla:5.2.0
    #   ports:
    #     - 9042:9042
    # redis:
    #   image: redis:7.4.0
    #   ports:
    #     - 6379:6379
    #   options: >-
    #     --health-cmd "redis-cli ping"
    #     --health-interval 10s
    #     --health-timeout 5s
    #     --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Check Rust version
        run: rustc --version
      - name: Build Release Binaries
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          CARGO_INCREMENTAL: 0
        run: |
          cargo build --release --bin web-server --bin sse-service -j 4
      - name: Wait for services
        run: |
          # Postgres
          # until pg_isready -h localhost -p 5432; do
          #   echo "Waiting for PostgreSQL..."
          #   sleep 2
          # done

          # Kafka
          # until nc -z localhost 9092; do
          #   echo "Waiting for Kafka..."
          #   sleep 2
          # done

          # Scylla
          # until cqlsh localhost 9042 -e "show version" >/dev/null 2>&1; do
          #   echo "Waiting for Scylla..."
          #   sleep 2
          # done

          # Redis
          # until redis-cli ping >/dev/null 2>&1; do
          #   echo "Waiting for Redis..."
          #   sleep 2
          # done
      # - name: Start Server
      #   run: |
      #     ./target/release/web-server &
      #     echo $! > server.pid
      # - name: Wait for Server and Health Check
      #   run: |
      #     for i in {1..30}; do
      #       if curl -sSf http://localhost:3000/health > /dev/null 2>&1; then
      #         echo "Server is up!"
      #         break
      #       fi
      #       echo "Waiting for server... (attempt $i)"
      #       sleep 2
      #     done
      # - name: Run example test
      #   run: cargo run -p web-server --example test
      # - name: Stop Server
      #   if: always()
      #   run: |
      #     if [ -f server.pid ]; then
      #       kill $(cat server.pid)
      #     fi
      - name: Upload Binaries as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-binaries
          path: |
            target/release/web-server
            target/release/sse-service

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Download Binaries
        uses: actions/download-artifact@v3
        with:
          name: rust-binaries
          path: binaries

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            bloomingflower/axum-backend-web:latest
          target: web-server
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          file: Dockerfile
          build-args: |
            BINARY_PATH=binaries/web-server

      - name: Build and push SSE Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            bloomingflower/axum-backend-sse:latest
          target: sse-service
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          file: Dockerfile
          build-args: |
            BINARY_PATH=binaries/sse-service

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
